// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ExceptionExample {
    function requireStatement(uint256 a, uint256 b) public pure returns (uint256) {
        // The require statement checks a condition and reverts the transaction if it fails
        require(b != 0, "Division by zero is not allowed");
        uint256 result = a / b;
        return result;
    }
    
    function assertStatement(uint256 a, uint256 b) public pure returns (uint256) {
        uint256 result = a + b;
        // The assert statement checks a condition and throws an error if it fails
        assert(result >= a);
        return result;
    }
    
    function revertStatement(uint256 a, uint256 b) public pure returns (uint256) {
        uint256 result = a - b;
        // The revert statement reverts the transaction and returns the provided error message
        if (result < 0) {
            revert("Subtraction result cannot be negative");
        }
        return result;
    }
}
